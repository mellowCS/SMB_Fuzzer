//! This module implements a SMB2 negotiate response.
//! The SMB2 NEGOTIATE Response packet is sent by the server to notify the client of the preferred common dialect.
//! This response is composed of an SMB2 header, followed by this response structure.

use crate::smb2::handshake_helper::{fields::SecurityMode, negotiate_context::NegotiateContext};

/// negotiate response size of 65 bytes
const STRUCTURE_SIZE: &str = "4100";

/// The SMB2 NEGOTIATE Response packet is sent by the server to notify
/// the client of the preferred common dialect. This response is composed of an
/// SMB2 header, followed by this response structure.
#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Negotiate {
    /// StructureSize (2 bytes): The server MUST set this field to 65,
    /// indicating the size of the response structure, not including the header.
    /// The server MUST set it to this value, regardless of the number of
    /// negotiate contexts or how long Buffer[] actually is in the response being sent.
    structure_size: String,
    /// SecurityMode (2 bytes): The security mode field specifies whether SMB signing is enabled,
    /// required at the server, or both. This field MUST be constructed using the following values.
    security_mode: Option<SecurityMode>,
    /// DialectRevision (2 bytes): The preferred common SMB 2 Protocol dialect number from the
    /// Dialects array that is sent in the SMB2 NEGOTIATE Request or the SMB2 wildcard revision number.
    /// The server SHOULD set this field to one of the following values.
    dialect_revision: Option<String>,
    /// NegotiateContextCount/Reserved (2 bytes): If the DialectRevision field is 0x0311,
    /// this field specifies the number of negotiate contexts in NegotiateContextList;
    /// otherwise, this field MUST NOT be used and MUST be reserved.
    /// The server SHOULD set this to 0, and the client MUST ignore it on receipt.
    negotiate_context_count: Option<String>,
    /// ServerGuid (16 bytes): A globally unique identifier (GUID) that is generated by the
    /// server to uniquely identify this server. This field MUST NOT be used by a client
    /// as a secure method of identifying a server.
    server_guid: Option<String>,
    /// Capabilities (4 bytes): The Capabilities field specifies protocol capabilities for the server.
    capabilities: Option<String>,
    /// MaxTransactSize (4 bytes): The maximum size, in bytes, of the buffer that can be used for
    /// QUERY_INFO, QUERY_DIRECTORY, SET_INFO and CHANGE_NOTIFY operations.
    /// This field is applicable only for buffers sent by the client in SET_INFO requests,
    /// or returned from the server in QUERY_INFO, QUERY_DIRECTORY, and CHANGE_NOTIFY responses.
    max_transact_size: Option<String>,
    /// MaxReadSize (4 bytes): The maximum size, in bytes, of the Length in an SMB2 READ Request
    /// that the server will accept.
    max_read_size: Option<String>,
    /// MaxWriteSize (4 bytes): The maximum size, in bytes, of the Length in an SMB2 WRITE Request
    /// that the server will accept.
    max_write_size: Option<String>,
    /// SystemTime (8 bytes): The system time of the SMB2 server when the SMB2 NEGOTIATE Request was
    /// processed in FILETIME format.
    system_time: Option<String>,
    /// ServerStartTime (8 bytes): The SMB2 server start time, in FILETIME format
    server_start_time: Option<String>,
    /// SecurityBufferOffset (2 bytes): The offset, in bytes, from the beginning
    /// of the SMB2 header to the security buffer.
    security_buffer_offset: Option<String>,
    /// SecurityBufferLength (2 bytes): The length, in bytes, of the security buffer.
    security_buffer_length: Option<String>,
    /// NegotiateContextOffset/Reserved2 (4 bytes): If the DialectRevision field is 0x0311,
    /// then this field specifies the offset, in bytes, from the beginning of the SMB2 header
    /// to the first 8-byte aligned negotiate context in NegotiateContextList; otherwise,
    /// the server MUST set this to 0 and the client MUST ignore it on receipt.
    negotiate_context_offset: Option<String>,
    /// Buffer (variable): The variable-length buffer that contains the security buffer for the response,
    /// as specified by SecurityBufferOffset and SecurityBufferLength. The buffer SHOULD contain a token
    /// as produced by the GSS protocol. If SecurityBufferLength is 0, this field is empty and then
    /// client-initiated authentication, with an authentication protocol of the client's choice,
    /// will be used instead of server-initiated SPNEGO authentication.
    buffer: Option<String>,
    /// Padding (variable): Optional padding between the end of the  Buffer field and the first
    /// negotiate context in the NegotiateContextList so that the first negotiate context is 8-byte aligned.
    padding: Option<String>,
    /// NegotiateContextList (variable): If the DialectRevision field is 0x0311, a list of negotiate contexts.
    /// The first negotiate context in the list MUST appear at the byte offset indicated by the
    /// SMB2 NEGOTIATE response's NegotiateContextOffset. Subsequent negotiate contexts MUST appear
    /// at the first 8-byte aligned offset following the previous negotiate context.
    negotiate_context_list: Vec<NegotiateContext>,
}

impl Negotiate {
    pub fn default() -> Self {
        Negotiate {
            structure_size: String::from(STRUCTURE_SIZE),
            security_mode: None,
            dialect_revision: None,
            negotiate_context_count: None,
            server_guid: None,
            capabilities: None,
            max_transact_size: None,
            max_read_size: None,
            max_write_size: None,
            system_time: None,
            server_start_time: None,
            security_buffer_offset: None,
            security_buffer_length: None,
            negotiate_context_offset: None,
            buffer: None,
            padding: None,
            negotiate_context_list: Vec::new(),
        }
    }
}

/// DialectRevision (2 bytes): The preferred common SMB 2 Protocol dialect number
/// from the Dialects array that is sent in the SMB2 NEGOTIATE Request or the SMB2 wildcard revision number.
/// The server SHOULD set this field to one of the following values.
#[derive(Debug, PartialEq, Eq, Clone)]
pub enum DialectRevision {
    SMB202,
    SMB21,
    SMB30,
    SMB302,
    SMB311,
    Wildcard,
}

impl DialectRevision {
    /// Unpacks the byte code for the dialect revision.
    pub fn unpack_byte_code(&self) -> String {
        match self {
            DialectRevision::SMB202 => String::from("0202"),
            DialectRevision::SMB21 => String::from("0210"),
            DialectRevision::SMB30 => String::from("0300"),
            DialectRevision::SMB302 => String::from("0302"),
            DialectRevision::SMB311 => String::from("0311"),
            DialectRevision::Wildcard => String::from("02ff"),
        }
    }
}
