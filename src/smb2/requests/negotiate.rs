//! This module implements a SMB2 negotiate request

use crate::smb2::handshake_helper::{fields::SecurityMode, negotiate_context::NegotiateContext};

/// negotiate request size of 36 bytes
const STRUCTURE_SIZE: &str = "2400";

/// A struct that represents a negotiate request
#[derive(Debug, PartialEq, Eq, Clone)]
pub struct Negotiate {
    /// StructureSize (2 bytes): The client MUST set this field to 36,
    /// indicating the size of a NEGOTIATE request. This is not the size
    /// of the structure with a single dialect in the Dialects[] array.
    /// This value MUST be set regardless of the number of dialects or
    /// number of negotiate contexts sent.
    structure_size: String,
    /// DialectCount (2 bytes): The number of dialects that are contained
    /// in the Dialects[] array. This value MUST be greater than 0.
    dialect_count: String,
    /// When set, indicates that security signatures are enabled on the client.
    /// The client MUST set this bit if the SMB2_NEGOTIATE_SIGNING_REQUIRED bit is not set,
    /// and MUST NOT set this bit if the SMB2_NEGOTIATE_SIGNING_REQUIRED bit is set.
    /// The server MUST ignore this bit.
    security_mode: SecurityMode,
    /// Reserved (2 bytes): The client MUST set this to 0, and
    /// the server SHOULD ignore it on receipt.
    reserved: String,
    /// Capabilities (4 bytes): If the client implements the SMB 3.x dialect family,
    /// the Capabilities field MUST be constructed. To have multiple capabilities, add up
    /// the individual hex values. e.g. all capabilities would be 0x0000007f
    /// Otherwise, this field MUST be set to 0.
    capabilities: String,
    /// ClientGuid (16 bytes): It MUST be a GUID (as specified in [MS-DTYP] section 2.3.4.2)
    /// generated by the client.
    client_guid: String,
    /// NegotiateContextOffset (4 bytes): The offset, in bytes, from the beginning
    /// of the SMB2 header to the first, 8-byte-aligned negotiate context in the NegotiateContextList.
    /// NOTE: This implementation focuses on the dialect 0x311 which does not use the Client Start Time field.
    negotiate_context_offset: Option<String>,
    /// NegotiateContextCount (2 bytes): The number of negotiate contexts in NegotiateContextList.
    /// NOTE: This implementation focuses on the dialect 0x311 which does not use the Client Start Time field.
    negotiate_context_count: Option<String>,
    /// Reserved2 (2 bytes): The client MUST set this to 0, and the server MUST ignore it on receipt.
    /// NOTE: This implementation focuses on the dialect 0x311 which does not use the Client Start Time field.
    reserved2: Option<String>,
    /// ClientStartTime (8 bytes): This field MUST NOT be used and MUST be reserved.
    /// The client MUST set this to 0, and the server MUST ignore it on receipt.
    /// NOTE: This implementation focuses on the dialects < 0x311.
    client_start_time: Option<String>,
    /// Dialects (variable): An array of one or more 16-bit integers specifying
    /// the supported dialect revision numbers. The array MUST contain at least one value.
    dialects: Vec<String>,
    /// Padding (variable): Optional padding between the end of the Dialects array and
    /// the first negotiate context in NegotiateContextList so that the first negotiate context is 8-byte aligned.
    padding: Option<String>,
    /// NegotiateContextList (variable): If the Dialects field contains 0x0311,
    /// then this field will contain an array of SMB2 NEGOTIATE_CONTEXTs.
    /// The first negotiate context in the list MUST appear at the byte offset indicated by the
    /// SMB2 NEGOTIATE request's NegotiateContextOffset field. Subsequent negotiate contexts MUST appear
    /// at the first 8-byte-aligned offset following the previous negotiate context.
    negotiate_context_list: Vec<NegotiateContext>,
}

impl Negotiate {
    pub fn new(security_mode: SecurityMode) -> Self {
        Negotiate {
            structure_size: String::from(STRUCTURE_SIZE),
            dialect_count: String::new(),
            security_mode,
            reserved: String::from("0000"),
            capabilities: String::new(),
            client_guid: String::new(),
            negotiate_context_offset: None,
            negotiate_context_count: None,
            reserved2: None,
            client_start_time: None,
            dialects: Vec::new(),
            padding: None,
            negotiate_context_list: Vec::new(),
        }
    }
}

/// Represents all supported dialects
#[derive(Debug, PartialEq, Eq, Clone)]
pub enum Dialects {
    SMB202,
    SMB21,
    SMB30,
    SMB302,
    SMB311,
}

impl Dialects {
    /// Return the corresponding byte code (4 bytes) for each dialect.
    pub fn unpack_byte_code(&self) -> String {
        match self {
            Dialects::SMB202 => String::from("0202"),
            Dialects::SMB21 => String::from("0210"),
            Dialects::SMB30 => String::from("0300"),
            Dialects::SMB302 => String::from("0302"),
            Dialects::SMB311 => String::from("0311"),
        }
    }

    /// Return the dialect array of all SMB2 dialects as a byte sequence.
    pub fn get_all_dialects() -> Vec<String> {
        vec![
            Dialects::SMB202.unpack_byte_code(),
            Dialects::SMB21.unpack_byte_code(),
            Dialects::SMB30.unpack_byte_code(),
            Dialects::SMB302.unpack_byte_code(),
            Dialects::SMB311.unpack_byte_code(),
        ]
    }
}
